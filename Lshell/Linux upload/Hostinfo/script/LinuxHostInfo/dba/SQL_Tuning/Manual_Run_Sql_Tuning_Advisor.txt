/**********************************************************/
/*******************   4. sql tuning adv   ****************/
/**********************************************************/

---------------------------------------- run SQL TUNING ADV by SQL TEXT
DECLARE
  my_task_desc VARCHAR2(30);
  my_task_name VARCHAR2(30);
  my_sqltext   CLOB;
 BEGIN
  my_task_desc:='my_task_'||TO_CHAR(SYSDATE,'YYYYMMDD-HH24:MI:SS');
  my_sqltext := q'[ ]';
   my_task_name := DBMS_SQLTUNE.CREATE_TUNING_TASK(
          sql_text    => my_sqltext,
          user_name   => 'XXXXXXXX',
          scope       => 'COMPREHENSIVE',
          time_limit  => 120,
          task_name   => 'my_task_01',
          description => my_task_desc);
 END;
 /

---------------------------------------- run SQL TUNING ADV by SQL ID in CURSOR
DECLARE
  my_task_desc VARCHAR2(30);
  my_task_name VARCHAR2(30);
 BEGIN
  my_task_desc:='my_task_'||TO_CHAR(SYSDATE,'YYYYMMDD-HH24:MI:SS');
  my_task_name := DBMS_SQLTUNE.CREATE_TUNING_TASK(
          sql_id    => 'fgdjg8hpfvzry',
          scope       => 'COMPREHENSIVE',
          time_limit  => 120,
          task_name   => 'my_task_07',
          description => my_task_desc);
 END;
 /


---------------------------------------- run SQL TUNING ADV by SQL ID in AWR
DECLARE
  my_task_desc VARCHAR2(30);
  my_task_name VARCHAR2(30);
 BEGIN
  my_task_desc:='my_task_'||TO_CHAR(SYSDATE,'YYYYMMDD-HH24:MI:SS');
  my_task_name := DBMS_SQLTUNE.CREATE_TUNING_TASK(
          sql_id    => 'cyx4cw5ugzhz0',
          begin_snap => 20207  ,
          end_snap =>  20216    ,
          scope       => 'COMPREHENSIVE',
          time_limit  => 120,
          task_name   => 'my_task_02',
          description => my_task_desc);
 END;
 /

---------------------------------------- EXEC SQL TUNING ADV TASK
BEGIN
 DBMS_SQLTUNE.EXECUTE_TUNING_TASK( task_name => 'my_task_02');
end;
/


---------------------------------------- CHECK SQL TUNING ADV RESULT
SET LONG 19999
SET LONGCHUNKSIZE 1000
SET LINESIZE 1000
SET PAGESIZE 999
SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK( 'my_task_02') from DUAL;


---------------------------------------- DROP SQL TUNING ADV RESULT
BEGIN
--drops a SQL tuning task.The task and all its result data are deleted.
DBMS_SQLTUNE.DROP_TUNING_TASK('my_task_07');
END;
/

---------------------------------------- CANCEL / INTERRUPT SQL TUNING ADV TASK
BEGIN
--cancels the currently executing tuning task. All intermediate result data is deleted.
DBMS_SQLTUNE.CANCEL_TUNING_TASK('my_task_07');
END;
/

BEGIN
--The task will end its operations as it would at normal exit so that the user will be able access the intermediate results.
DBMS_SQLTUNE.INTERRUPT_TUNING_TASK('my_task_07);
END;
/


---------------------------------------- ACCEPT SQL PROFILE
BEGIN
dbms_sqltune.accept_sql_profile(task_name =>'my_task_01',name=>'my_task_01_profile',replace => TRUE);
END;
/

---------------------------------------- DROP SQL PROFILE
BEGIN
DBMS_SQLTUNE.DROP_SQL_PROFILE('my_task_01_profile');
END;
/

---------------------------------------- CHECK ALL SQL PROFILE IN DICT
select * from dba_sql_profiles;


